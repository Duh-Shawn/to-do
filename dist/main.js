(()=>{"use strict";class e{constructor(e){this.controller=e}init(){document.querySelectorAll(".new-task-button").forEach((e=>{e.addEventListener("click",t.openTaskForm)})),document.getElementById("new-project-button").addEventListener("click",t.openProjectForm),document.querySelectorAll(".close-popup").forEach((e=>{e.addEventListener("click",t.closeForm)})),document.getElementById("task-form-submission").addEventListener("click",this.controller.createTask),document.getElementById("project-form-submission").addEventListener("click",this.controller.createProject)}initTask(e){e.querySelector(".remove-task").addEventListener("click",this.controller.deleteTask),e.querySelector(".task-left").querySelector(".task-completed-checkbox").addEventListener("click",this.controller.markTaskCompleted)}initProject(e){e.querySelector(".remove-project").addEventListener("click",this.controller.deleteProject),e.querySelector(".project-name").addEventListener("click",this.controller.setSelectedProject)}}class t{constructor(t){this.controller=t,this.events=new e(t)}displayProjectList=e=>{this.clearProjectContainer();for(let t=0;t<e.length;t++){const s=document.createElement("div");s.classList="project",s.dataset.indexNumber=t,s.innerHTML=`<p class="project-name">${e[t].name}</p><div class="remove-project">+</div>`,this.events.initProject(s),document.querySelector(".projects-container").appendChild(s)}};clearProjectContainer=()=>{document.querySelector(".projects-container").innerHTML=""};clearProjectContent=()=>{document.querySelector(".project-data").innerHTML=""};contentDeletedDisplay=()=>{document.querySelector(".content h1").innerHTML="Project has successfully been deleted",document.querySelector(".project-data").innerHTML=" This project has been deleted please select a new one"};displayProjectTasks=e=>{document.querySelector(".content h1").textContent=e.name,this.clearProjectContent();for(let t=0;t<e.taskList.length;t++){const s=e.taskList[t],o=document.createElement("div");o.classList="task",o.dataset.indexNumber=t,o.innerHTML=`<div class="task-left"><input class="task-completed-checkbox" type="checkbox"><p class="task-title">${s.title}</p></div><div class="task-right"><p class="task-due">${s.dueDate}<div class="remove-task">+</div></div>`,!0===s.isCompleted&&(o.querySelector(".task-left").querySelector(".task-completed-checkbox").checked=!0),this.events.initTask(o),document.querySelector(".project-data").appendChild(o)}};static openTaskForm=()=>{document.querySelector(".bg-modal").style.display="flex",document.querySelector(".new-task-popup").style.display="flex"};static closeForm=e=>{document.querySelector(".bg-modal").style.display="none",e.target.parentNode.style.display="none"};static openProjectForm=()=>{document.querySelector(".bg-modal").style.display="flex",document.querySelector(".new-project-popup").style.display="flex"}}class s{constructor(e,t,s,o,c){this.title=e,this.description=t,this.dueDate=s,this.priority=o,this.isCompleted=c}markComplete(){this.isCompleted=!0}markIncomplete(){this.isCompleted=!1}}class o{static id=0;static incrementId(){this.id++}constructor(e){o.incrementId(),this.name=e,this.taskList=[],this.id=o.id}addTask(e){this.taskList.push(e)}removeTask(e){this.taskList.splice(e,1)}}class c{constructor(e,s){this.projectList=e,this.selectedProject=s,this.ui=new t(this)}createProject=e=>{e.preventDefault();const t=document.getElementById("name").value;this.projectList.push(new o(t)),this.ui.displayProjectList(this.projectList),localStorage.setItem("projectList",JSON.stringify(this.projectList))};setSelectedProject=e=>{const t=e.target.parentNode.dataset.indexNumber;this.selectedProject=this.projectList[t],this.ui.displayProjectTasks(this.selectedProject),localStorage.setItem("selectedProject",JSON.stringify(this.selectedProject))};removeProjectFromList=e=>{this.projectList.splice(e,1),localStorage.setItem("projectList",JSON.stringify(this.projectList))};deleteProject=e=>{const t=e.target.parentNode.dataset.indexNumber;this.projectList[t]===this.selectedProject&&this.ui.contentDeletedDisplay(),this.removeProjectFromList(t),this.ui.displayProjectList(this.projectList),localStorage.setItem("projectList",JSON.stringify(this.projectList))};createTask=e=>{e.preventDefault();const t=document.getElementById("title").value,o=document.getElementById("description").value,c=document.getElementById("due").value,r=document.getElementById("priority").value,i=new s(t,o,c,r,!1);this.selectedProject.addTask(i),localStorage.setItem("selectedProject",JSON.stringify(this.selectedProject)),localStorage.setItem("projectList",JSON.stringify(this.projectList)),this.ui.displayProjectTasks(this.selectedProject)};deleteTask=e=>{const t=e.target.parentNode.dataset.indexNumber;this.selectedProject.removeTask(t),localStorage.setItem("selectedProject",JSON.stringify(this.selectedProject)),localStorage.setItem("projectList",JSON.stringify(this.projectList)),this.ui.displayProjectTasks(this.selectedProject)};markTaskCompleted=e=>{if(e.target.checked){const t=e.target.parentNode.parentNode.dataset.indexNumber;this.selectedProject.taskList[t].markComplete()}else{const t=e.target.parentNode.parentNode.dataset.indexNumber;this.selectedProject.taskList[t].markIncomplete()}localStorage.setItem("selectedProject",JSON.stringify(this.selectedProject)),localStorage.setItem("projectList",JSON.stringify(this.projectList))}}class r{static localListContainsSelectedProject=()=>{const e=JSON.parse(localStorage.getItem("projectList")),t=JSON.parse(localStorage.getItem("selectedProject"));return e.some((e=>e.id===t.id))};static convertJsonToProject=e=>{const t=e.taskList,c=new o(e.name);return t.forEach((e=>{const t=new s(e.title,e.description,e.dueDate,e.priority,e.isCompleted);c.addTask(t)})),c};static initObjectsFromLocalStorage=()=>{let e,t=[];if(0===localStorage.length)e=new o("Default"),t=[],t.push(e),localStorage.setItem("projectList",JSON.stringify(t)),localStorage.setItem("selectedProject",JSON.stringify(e));else{const s=JSON.parse(localStorage.getItem("projectList"));if(0===s.length)e=new o("Default"),t=[],t.push(e),localStorage.setItem("projectList",JSON.stringify(t)),localStorage.setItem("selectedProject",JSON.stringify(e));else{const o=JSON.parse(localStorage.getItem("selectedProject"));console.log(o);let c=!1;s.forEach((s=>{if(s.id===o.id){const o=this.convertJsonToProject(s);e=o,t.push(e),c=!0}else{const e=this.convertJsonToProject(s);t.push(e)}})),c||(e=t[0],localStorage.setItem("selectedProject",JSON.stringify(e)))}}return{projectList:t,selectedProject:e}}}(()=>{const{projectList:s,selectedProject:o}=r.initObjectsFromLocalStorage(),i=new c(s,o);new e(i).init();const l=new t(i);l.displayProjectTasks(o),l.displayProjectList(s)})()})();