(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var s=e.g.document;if(!t&&s&&(s.currentScript&&(t=s.currentScript.src),!t)){var o=s.getElementsByTagName("script");o.length&&(t=o[o.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();class t{constructor(e){this.controller=e}init(){document.querySelectorAll(".new-task-button").forEach((e=>{e.addEventListener("click",c.openTaskForm)})),document.getElementById("new-project-button").addEventListener("click",c.openProjectForm),document.querySelectorAll(".close-popup").forEach((e=>{e.addEventListener("click",c.closeForm)})),document.getElementById("task-form-submission").addEventListener("click",(e=>{this.controller.createTask(e),c.closeTaskPopUp()})),document.getElementById("project-form-submission").addEventListener("click",(e=>{this.controller.createProject(e),c.closeProjectPopUp()}))}initTask(e){e.querySelector(".remove-task").addEventListener("click",this.controller.deleteTask),e.querySelector(".task-completed-checkbox").addEventListener("click",this.controller.markTaskCompleted),e.querySelector(".task-info-icon").addEventListener("click",this.controller.viewTaskInfo)}initProject(e){e.querySelector(".remove-project").addEventListener("click",this.controller.deleteProject),e.querySelector(".project-name").addEventListener("click",this.controller.setSelectedProject)}initCloseInfoPopupButton(e){e.querySelector(".close-info-popup").addEventListener("click",c.closeTaskInfo)}}const s=e.p+"555a54fb5880f21f15e4.svg",o=e.p+"3cd1d511eb954c7c84c5.svg";class c{constructor(e){this.controller=e,this.events=new t(e)}static closeTaskInfo=()=>{document.querySelector(".task-info-popup").style.display="none",document.querySelector(".bg-modal").style.display="none"};displayTaskInfo=(e,t)=>{document.querySelector(".bg-modal").style.display="flex";const s=document.querySelector(".task-info-popup");s.innerHTML=`<div class="close-info-popup">+</div><div class="task-info"><div class="task-info-title">\n        <span>Title: </span> <span>${e.title}</span>\n    </div>\n    <div class="task-info-project">\n        <span>Project: </span> <span>${t.name}</span>\n    </div>\n    <div class="task-info-date">\n        <span>Due Date: </span> <span>${e.dueDate}</span>\n    </div>\n    <div class="task-info-details">\n        <span>Description: </span> <span class="task-info-description">${e.description}</span>\n    </div></div>`,document.querySelector(".bg-modal").appendChild(s),s.style.display="block",this.events.initCloseInfoPopupButton(s)};displayProjectList=e=>{this.clearProjectContainer();for(let t=0;t<e.length;t++){const s=document.createElement("div");s.classList="project",s.dataset.indexNumber=t,s.innerHTML=`<p class="project-name">${e[t].name}</p><div class="remove-project">+</div>`,this.events.initProject(s),document.querySelector(".projects-container").appendChild(s)}};clearProjectContainer=()=>{document.querySelector(".projects-container").innerHTML=""};clearProjectContent=()=>{document.querySelector(".project-data").innerHTML=""};contentDeletedDisplay=()=>{document.querySelector(".content h1").innerHTML="Project has successfully been deleted",document.querySelector(".project-data").innerHTML=" This project has been deleted please select a new one"};displayProjectTasks=e=>{document.querySelector(".content h1").textContent=e.name,this.clearProjectContent();for(let t=0;t<e.taskList.length;t++){const c=e.taskList[t],r=document.createElement("div");r.classList="task",r.dataset.indexNumber=t,r.innerHTML=`<div class="task-left"><input class="task-completed-checkbox" type="checkbox"><p class="task-title">${c.title}</p></div><div class="task-right"><p class="task-due">${c.dueDate}</p><img class="task-info-icon"><img class="task-edit-icon"><div class="remove-task">+</div></div>`,r.querySelector(".task-info-icon").src=s,r.querySelector(".task-edit-icon").src=o,!0===c.isCompleted&&(r.querySelector(".task-left").querySelector(".task-completed-checkbox").checked=!0),this.events.initTask(r),document.querySelector(".project-data").appendChild(r)}};static openTaskForm=()=>{document.querySelector(".bg-modal").style.display="flex",document.querySelector(".new-task-popup").style.display="flex"};static closeForm=e=>{document.querySelector(".bg-modal").style.display="none",e.target.parentNode.style.display="none"};static closeTaskPopUp=e=>{document.querySelector(".bg-modal").style.display="none",document.querySelector(".new-task-popup").style.display="none"};static closeProjectPopUp=e=>{document.querySelector(".bg-modal").style.display="none",document.querySelector(".new-project-popup").style.display="none"};static openProjectForm=()=>{document.querySelector(".bg-modal").style.display="flex",document.querySelector(".new-project-popup").style.display="flex"}}class r{constructor(e,t,s,o,c){this.title=e,this.description=t,this.dueDate=s,this.priority=o,this.isCompleted=c}markComplete(){this.isCompleted=!0}markIncomplete(){this.isCompleted=!1}}class i{static id=0;static incrementId(){this.id++}constructor(e){i.incrementId(),this.name=e,this.taskList=[],this.id=i.id}addTask(e){this.taskList.push(e)}removeTask(e){this.taskList.splice(e,1)}}class n{constructor(e,t){this.projectList=e,this.selectedProject=t,this.ui=new c(this)}createProject=e=>{e.preventDefault();const t=document.getElementById("name").value;this.projectList.push(new i(t)),this.ui.displayProjectList(this.projectList),localStorage.setItem("projectList",JSON.stringify(this.projectList)),c.closeProjectPopUp()};setSelectedProject=e=>{const t=e.target.parentNode.dataset.indexNumber;this.selectedProject=this.projectList[t],this.ui.displayProjectTasks(this.selectedProject),localStorage.setItem("selectedProject",JSON.stringify(this.selectedProject))};removeProjectFromList=e=>{this.projectList.splice(e,1),localStorage.setItem("projectList",JSON.stringify(this.projectList))};deleteProject=e=>{const t=e.target.parentNode.dataset.indexNumber;this.projectList[t]===this.selectedProject&&this.ui.contentDeletedDisplay(),this.removeProjectFromList(t),this.ui.displayProjectList(this.projectList),localStorage.setItem("projectList",JSON.stringify(this.projectList))};createTask=e=>{e.preventDefault();const t=document.getElementById("title").value,s=document.getElementById("description").value,o=document.getElementById("due").value,c=document.getElementById("priority").value,i=new r(t,s,o,c,!1);this.selectedProject.addTask(i),localStorage.setItem("selectedProject",JSON.stringify(this.selectedProject)),localStorage.setItem("projectList",JSON.stringify(this.projectList)),this.ui.displayProjectTasks(this.selectedProject)};deleteTask=e=>{const t=e.target.parentNode.parentNode.dataset.indexNumber;this.selectedProject.removeTask(t),localStorage.setItem("selectedProject",JSON.stringify(this.selectedProject)),localStorage.setItem("projectList",JSON.stringify(this.projectList)),this.ui.displayProjectTasks(this.selectedProject)};markTaskCompleted=e=>{if(e.target.checked){const t=e.target.parentNode.parentNode.dataset.indexNumber;this.selectedProject.taskList[t].markComplete()}else{const t=e.target.parentNode.parentNode.dataset.indexNumber;this.selectedProject.taskList[t].markIncomplete()}localStorage.setItem("selectedProject",JSON.stringify(this.selectedProject)),localStorage.setItem("projectList",JSON.stringify(this.projectList))};viewTaskInfo=e=>{const t=e.target.parentNode.parentNode.dataset.indexNumber,s=this.selectedProject.taskList[t];this.ui.displayTaskInfo(s,this.selectedProject)}}class a{static localListContainsSelectedProject=()=>{const e=JSON.parse(localStorage.getItem("projectList")),t=JSON.parse(localStorage.getItem("selectedProject"));return e.some((e=>e.id===t.id))};static convertJsonToProject=e=>{const t=e.taskList,s=new i(e.name);return t.forEach((e=>{const t=new r(e.title,e.description,e.dueDate,e.priority,e.isCompleted);s.addTask(t)})),s};static initObjectsFromLocalStorage=()=>{let e,t=[];if(0===localStorage.length)e=new i("Default"),t=[],t.push(e),localStorage.setItem("projectList",JSON.stringify(t)),localStorage.setItem("selectedProject",JSON.stringify(e));else{const s=JSON.parse(localStorage.getItem("projectList"));if(0===s.length)e=new i("Default"),t=[],t.push(e),localStorage.setItem("projectList",JSON.stringify(t)),localStorage.setItem("selectedProject",JSON.stringify(e));else{const o=JSON.parse(localStorage.getItem("selectedProject"));let c=!1;s.forEach((s=>{if(s.id===o.id){const o=this.convertJsonToProject(s);e=o,localStorage.setItem("selectedProject",JSON.stringify(e)),t.push(e),c=!0}else{const e=this.convertJsonToProject(s);t.push(e)}})),c||(e=t[0],localStorage.setItem("selectedProject",JSON.stringify(e)))}}return{projectList:t,selectedProject:e}}}(()=>{const{projectList:e,selectedProject:s}=a.initObjectsFromLocalStorage(),o=new n(e,s);new t(o).init();const r=new c(o);r.displayProjectTasks(s),r.displayProjectList(e)})()})();