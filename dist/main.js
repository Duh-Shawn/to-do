(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var s=e.g.document;if(!t&&s&&(s.currentScript&&(t=s.currentScript.src),!t)){var o=s.getElementsByTagName("script");o.length&&(t=o[o.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();class t{constructor(e){this.controller=e}init(){document.querySelectorAll(".new-task-button").forEach((e=>{e.addEventListener("click",i.openTaskForm)})),document.getElementById("new-project-button").addEventListener("click",i.openProjectForm),document.querySelectorAll(".close-popup").forEach((e=>{e.addEventListener("click",i.closeForm)})),document.getElementById("task-form-submission").addEventListener("click",(e=>{this.controller.createTask(e),i.closeTaskPopUp()})),document.getElementById("project-form-submission").addEventListener("click",(e=>{this.controller.createProject(e),i.closeProjectPopUp()}))}initTask(e){e.querySelector(".remove-task").addEventListener("click",this.controller.deleteTask),e.querySelector(".task-completed-checkbox").addEventListener("click",this.controller.markTaskCompleted),e.querySelector(".task-info-icon").addEventListener("click",this.controller.viewTaskInfo),e.querySelector(".task-edit-icon").addEventListener("click",this.controller.viewEditTask)}initProject(e){e.querySelector(".remove-project").addEventListener("click",this.controller.deleteProject),e.querySelector(".project-name").addEventListener("click",this.controller.setSelectedProject),e.querySelector(".project-edit-icon").addEventListener("click",this.controller.viewEditProject)}initCloseInfoPopupButton(e){e.querySelector(".close-info-popup").addEventListener("click",i.closeTaskInfo)}initTaskEdit(e,t){e.addEventListener("click",(e=>{this.controller.editTask(e,t),i.closeEditPopUp(e)}))}initProjectEdit(e,t){e.addEventListener("click",(e=>{this.controller.editProject(e,t),i.closeEditPopUp(e)}))}}const s=e.p+"555a54fb5880f21f15e4.svg",o=e.p+"3cd1d511eb954c7c84c5.svg";class i{constructor(e){this.controller=e,this.events=new t(e)}sanitizeHTML=e=>{const t=document.createElement("div");return t.textContent=e,t.innerHTML};displayEditProjectPopup=e=>{document.querySelector(".bg-modal").style.display="flex",document.querySelector(".edit-project-popup").style.display="flex",document.querySelector("#edit-project-form #name").value=e.name,this.events.initProjectEdit(document.querySelector("#edit-project-submission"),e)};displayEditTaskPopup=e=>{document.querySelector(".bg-modal").style.display="flex",document.querySelector(".edit-task-popup").style.display="flex",document.querySelector("#edit-task-form #title").value=e.title,document.querySelector("#edit-task-form #description").value=e.description,document.querySelector("#edit-task-form #due").value=e.dueDate,document.querySelector("#edit-task-form #priority").value=e.priority,e.isCompleted?document.querySelector("#edit-task-form #completed").checked=!0:document.querySelector("#edit-task-form #completed").checked=!1,this.events.initTaskEdit(document.querySelector("#edit-form-submission"),e)};displayTaskInfo=(e,t)=>{document.querySelector(".bg-modal").style.display="flex";const s=document.querySelector(".task-info-popup");s.innerHTML=`<div class="close-info-popup">+</div><div class="task-info">\n\n        \n    <div class="task-info-title">\n        <span>Title: </span> <span>${this.sanitizeHTML(e.title)}</span>\n    </div>\n    <div class="task-info-project">\n        <span>Project: </span> <span>${this.sanitizeHTML(t.name)}</span>\n    </div>\n    <div class="task-info-completion">\n        <span>Completed: </span> <span>${this.sanitizeHTML(e.isCompleted)}</span>\n    </div>\n    <div class="task-info-priority">\n        <span>Priority: </span> <span>${this.sanitizeHTML(e.priority)}</span>\n    </div>\n    <div class="task-info-date">\n        <span>Due Date: </span> <span>${this.sanitizeHTML(e.dueDate)}</span>\n    </div>\n    <div class="task-info-details">\n        <span>Description: </span> <span class="task-info-description">${this.sanitizeHTML(e.description)}</span>\n    </div></div>`,document.querySelector(".bg-modal").appendChild(s),s.style.display="block",this.events.initCloseInfoPopupButton(s)};displayProjectList=e=>{this.clearProjectContainer();for(let t=0;t<e.length;t++){const s=document.createElement("div");s.classList="project",s.dataset.indexNumber=t,s.innerHTML=`<p class="project-name">${this.sanitizeHTML(e[t].name)}</p><div class=project-buttons><img class="project-edit-icon"><div class="remove-project">+</div></div>`,s.querySelector(".project-edit-icon").src=o,this.events.initProject(s),document.querySelector(".projects-container").appendChild(s)}};clearProjectContainer=()=>{document.querySelector(".projects-container").innerHTML=""};clearProjectContent=()=>{document.querySelector(".project-data").innerHTML=""};contentDeletedDisplay=()=>{document.querySelector(".content h1").innerHTML="Project has successfully been deleted",document.querySelector(".project-data").innerHTML=" This project has been deleted please select a new one"};displayProjectTasks=e=>{document.querySelector(".content h1").textContent=e.name,this.clearProjectContent();for(let t=0;t<e.taskList.length;t++){const i=e.taskList[t],c=document.createElement("div");c.classList="task",c.dataset.indexNumber=t,c.innerHTML=`<div class="task-left"><input class="task-completed-checkbox" type="checkbox"><p class="task-title">${this.sanitizeHTML(i.title)}</p></div><div class="task-right"><p class="task-due">${this.sanitizeHTML(i.dueDate)}</p><img class="task-info-icon"><img class="task-edit-icon"><div class="remove-task">+</div></div>`,c.querySelector(".task-info-icon").src=s,c.querySelector(".task-edit-icon").src=o,!0===i.isCompleted&&(c.querySelector(".task-left").querySelector(".task-completed-checkbox").checked=!0),this.events.initTask(c),document.querySelector(".project-data").appendChild(c)}};static openTaskForm=()=>{document.querySelector(".bg-modal").style.display="flex",document.querySelector(".new-task-popup").style.display="flex"};static closeForm=e=>{document.querySelector(".bg-modal").style.display="none",e.target.parentNode.style.display="none"};static closeEditPopUp=e=>{document.querySelector(".bg-modal").style.display="none",e.target.parentNode.parentNode.style.display="none"};static closeTaskPopUp=e=>{document.querySelector(".bg-modal").style.display="none",document.querySelector(".new-task-popup").style.display="none"};static closeProjectPopUp=e=>{document.querySelector(".bg-modal").style.display="none",document.querySelector(".new-project-popup").style.display="none"};static openProjectForm=()=>{document.querySelector(".bg-modal").style.display="flex",document.querySelector(".new-project-popup").style.display="flex"};static closeTaskInfo=()=>{document.querySelector(".task-info-popup").style.display="none",document.querySelector(".bg-modal").style.display="none"}}class c{constructor(e,t,s,o,i){this.title=e,this.description=t,this.dueDate=s,this.priority=o,this.isCompleted=i}markComplete(){this.isCompleted=!0}markIncomplete(){this.isCompleted=!1}setTitle(e){this.title=e}setDescription(e){this.description=e}setDueDate(e){this.dueDate=e}setPriority(e){this.priority=e}setCompletedStatus(e){this.isCompleted=e}}class r{static id=0;static incrementId(){this.id++}constructor(e){r.incrementId(),this.name=e,this.taskList=[],this.id=r.id}addTask(e){this.taskList.push(e)}removeTask(e){this.taskList.splice(e,1)}setName(e){this.name=e}}class n{constructor(e,t){this.projectList=e,this.selectedProject=t,this.ui=new i(this)}createProject=e=>{e.preventDefault();const t=document.getElementById("name").value;this.projectList.push(new r(t)),this.ui.displayProjectList(this.projectList),localStorage.setItem("projectList",JSON.stringify(this.projectList))};setSelectedProject=e=>{const t=e.target.parentNode.dataset.indexNumber;this.selectedProject=this.projectList[t],this.ui.displayProjectTasks(this.selectedProject),localStorage.setItem("selectedProject",JSON.stringify(this.selectedProject))};removeProjectFromList=e=>{this.projectList.splice(e,1)};deleteProject=e=>{const t=e.target.parentNode.parentNode.dataset.indexNumber;this.projectList[t]===this.selectedProject&&this.ui.contentDeletedDisplay(),this.removeProjectFromList(t),this.ui.displayProjectList(this.projectList),localStorage.setItem("selectedProject",JSON.stringify(this.selectedProject)),localStorage.setItem("projectList",JSON.stringify(this.projectList))};viewEditProject=e=>{const t=e.target.parentNode.parentNode.dataset.indexNumber,s=this.projectList[t];this.ui.displayEditProjectPopup(s)};editProject=(e,t)=>{e.preventDefault();const s=document.querySelector("#edit-project-form #name").value;t.setName(s),localStorage.setItem("projectList",JSON.stringify(this.projectList)),this.ui.displayProjectList(this.projectList)};createTask=e=>{const t=document.getElementById("title").value,s=document.getElementById("description").value,o=document.getElementById("due").value,i=document.getElementById("priority").value;let r;r=!!document.getElementById("completed").checked;const n=new c(t,s,o,i,r);this.selectedProject.addTask(n),localStorage.setItem("selectedProject",JSON.stringify(this.selectedProject)),localStorage.setItem("projectList",JSON.stringify(this.projectList)),this.ui.displayProjectTasks(this.selectedProject)};deleteTask=e=>{const t=e.target.parentNode.parentNode.dataset.indexNumber;this.selectedProject.removeTask(t),localStorage.setItem("selectedProject",JSON.stringify(this.selectedProject)),localStorage.setItem("projectList",JSON.stringify(this.projectList)),this.ui.displayProjectTasks(this.selectedProject)};markTaskCompleted=e=>{if(e.target.checked){const t=e.target.parentNode.parentNode.dataset.indexNumber;this.selectedProject.taskList[t].markComplete()}else{const t=e.target.parentNode.parentNode.dataset.indexNumber;this.selectedProject.taskList[t].markIncomplete()}localStorage.setItem("selectedProject",JSON.stringify(this.selectedProject)),localStorage.setItem("projectList",JSON.stringify(this.projectList))};viewTaskInfo=e=>{const t=e.target.parentNode.parentNode.dataset.indexNumber,s=this.selectedProject.taskList[t];this.ui.displayTaskInfo(s,this.selectedProject)};viewEditTask=e=>{const t=e.target.parentNode.parentNode.dataset.indexNumber,s=this.selectedProject.taskList[t];this.ui.displayEditTaskPopup(s)};editTask=(e,t)=>{e.preventDefault();const s=document.querySelector("#edit-task-form #title").value,o=document.querySelector("#edit-task-form #description").value,i=document.querySelector("#edit-task-form #due").value,c=document.querySelector("#edit-task-form #priority").value,r=document.querySelector("#edit-task-form #completed").checked;t.setTitle(s),t.setDescription(o),t.setDueDate(i),t.setPriority(c),t.setCompletedStatus(r),localStorage.setItem("selectedProject",JSON.stringify(this.selectedProject)),localStorage.setItem("projectList",JSON.stringify(this.projectList)),this.ui.displayProjectTasks(this.selectedProject)}}class a{static localListContainsSelectedProject=()=>{const e=JSON.parse(localStorage.getItem("projectList")),t=JSON.parse(localStorage.getItem("selectedProject"));return e.some((e=>e.id===t.id))};static convertJsonToProject=e=>{const t=e.taskList,s=new r(e.name);return t.forEach((e=>{const t=new c(e.title,e.description,e.dueDate,e.priority,e.isCompleted);s.addTask(t)})),s};static initObjectsFromLocalStorage=()=>{let e,t=[];if(0===localStorage.length)e=new r("Default"),t=[],t.push(e),localStorage.setItem("projectList",JSON.stringify(t)),localStorage.setItem("selectedProject",JSON.stringify(e));else{const s=JSON.parse(localStorage.getItem("projectList"));if(0===s.length)e=new r("Default"),t=[],t.push(e),localStorage.setItem("projectList",JSON.stringify(t)),localStorage.setItem("selectedProject",JSON.stringify(e));else{const o=JSON.parse(localStorage.getItem("selectedProject"));let i=!1;s.forEach((s=>{if(s.id===o.id){const o=this.convertJsonToProject(s);e=o,localStorage.setItem("selectedProject",JSON.stringify(e)),t.push(e),i=!0}else{const e=this.convertJsonToProject(s);t.push(e)}})),i||(e=t[0],localStorage.setItem("selectedProject",JSON.stringify(e)))}}return{projectList:t,selectedProject:e}}}(()=>{const{projectList:e,selectedProject:s}=a.initObjectsFromLocalStorage(),o=new n(e,s);new t(o).init();const c=new i(o);c.displayProjectTasks(s),c.displayProjectList(e)})()})();